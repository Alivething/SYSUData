# -*- coding: utf-8 -*-
"""UnetRuns.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Mqb4n4XyhcAo-pr-4MOcrE578an9jFEx
"""

from keras_unet_collection import models

import glob
import cv2
import os
import keras_unet_collection.losses as loss
import numpy as np
from matplotlib import pyplot as plt
import tensorflow as tf

SIZE_X = 256 #Resize images (height  = X, width = Y)
SIZE_Y = 256

#Capture training image info as a list
train_images = []
train_masks = []

# pathLabel = "/content/drive/MyDrive/The-SUSTech-SYSU-dataset-for-automatically-segmenting-and-classifying-corneal-ulcers-master/ulcerLabels"
# pathOverlay = "/content/drive/MyDrive/The-SUSTech-SYSU-dataset-for-automatically-segmenting-and-classifying-corneal-ulcers-master/ulcerOverlay"

for directory_path in glob.glob("The-SUSTech-SYSU-dataset-for-automatically-segmenting-and-classifying-corneal-ulcers-master\Overlay"):
    for img_path in glob.glob(os.path.join(directory_path, "*.jpg")):
        #print(img_path)
        img = cv2.imread(img_path, cv2.IMREAD_COLOR)       
        img = cv2.resize(img, (SIZE_Y, SIZE_X))
        img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)
        train_images.append(img/255)
        #train_labels.append(label)
#Convert list to array for machine learning processing        
train_images = np.array(train_images)

#Capture mask/label info as a list
train_masks = [] 
for directory_path in glob.glob("The-SUSTech-SYSU-dataset-for-automatically-segmenting-and-classifying-corneal-ulcers-master\Labels"):
    for mask_path in glob.glob(os.path.join(directory_path, "*.png")):
        mask = cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE)       
        mask = cv2.resize(mask, (SIZE_Y, SIZE_X))
        # mask = cv2.cvtColor(mask, cv2.COLOR_RGB2BGR)
        train_masks.append(mask/255)
        #train_labels.append(label)
#Convert list to array for machine learning processing          
train_masks = np.array(train_masks)

print(train_images[0])
print(train_masks[0])

model = models.att_unet_2d((256, 256, 3), filter_num=[64, 128, 256, 512, 1024], n_labels=1, 
                           stack_num_down=2, stack_num_up=2, activation='ReLU', 
                           atten_activation='ReLU', attention='add', output_activation='Sigmoid', 
                           batch_norm=True, pool=False, unpool=False, 
                           backbone='VGG16', weights='imagenet', 
                           freeze_backbone=True, freeze_batch_norm=True, 
                           name='attunet')

model.compile(optimizer='Adam', loss=loss.iou_seg) # metrics=tf.keras.metrics.MeanIoU(num_classes=2))

print(model.summary())

X = train_images
Y = train_masks
print(X.shape, Y.shape)

Y = np.expand_dims(Y, axis=3) #May not be necessary.. leftover from previous code 


from sklearn.model_selection import train_test_split
x_train, x_val, y_train, y_val = train_test_split(X, Y, test_size=0.2, random_state=2)

history = model.fit(
   x=x_train,
   y=y_train,
   batch_size=16,
   epochs=25,
   verbose=1,
   validation_data=(x_val, y_val),
)

test_img = cv2.imread('The-SUSTech-SYSU-dataset-for-automatically-segmenting-and-classifying-corneal-ulcers-master\Overlay/1.jpg', cv2.IMREAD_COLOR)
tested_label = cv2.imread('The-SUSTech-SYSU-dataset-for-automatically-segmenting-and-classifying-corneal-ulcers-master\Labels/1.png', cv2.IMREAD_GRAYSCALE)
test_img = cv2.resize(test_img, (SIZE_Y, SIZE_X))
test_img = cv2.cvtColor(test_img, cv2.COLOR_RGB2BGR)
plt.imshow(test_img, cmap='gray')
plt.imshow(tested_label, cmap='gray')
test_img = np.expand_dims(test_img, axis=0)

prediction = model.predict(test_img/255)
cv2.imshow(prediction[0]*255)

# Visualize training history
import matplotlib.pyplot as plt
import numpy as np
# list all data in history
print(history.history.keys())
# summarize history for accuracy
plt.plot(history.history['Accuracy'])
plt.plot(history.history['val_Accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()
# summarize history for loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()